// Mocks generated by Mockito 5.1.0 from annotations
// in dima21_migliore_tortorelli/test/providers/user_data_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:dima21_migliore_tortorelli/models/UserModel.dart' as _i7;
import 'package:dima21_migliore_tortorelli/providers/authentication.dart'
    as _i6;
import 'package:dima21_migliore_tortorelli/providers/user_data.dart' as _i5;
import 'package:location/location.dart' as _i4;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseFirestore_0 extends _i1.Fake
    implements _i2.FirebaseFirestore {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeLocation_2 extends _i1.Fake implements _i4.Location {}

class _FakeLocationData_3 extends _i1.Fake implements _i4.LocationData {}

/// A class which mocks [UserDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDataProvider extends _i1.Mock implements _i5.UserDataProvider {
  MockUserDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set authenticationProvider(
          _i6.AuthenticationProvider? _authenticationProvider) =>
      super.noSuchMethod(
          Invocation.setter(#authenticationProvider, _authenticationProvider),
          returnValueForMissingStub: null);
  @override
  _i2.FirebaseFirestore get fireStore =>
      (super.noSuchMethod(Invocation.getter(#fireStore),
          returnValue: _FakeFirebaseFirestore_0()) as _i2.FirebaseFirestore);
  @override
  set user(_i7.UserModel? _user) =>
      super.noSuchMethod(Invocation.setter(#user, _user),
          returnValueForMissingStub: null);
  @override
  String get lastMessage =>
      (super.noSuchMethod(Invocation.getter(#lastMessage), returnValue: '')
          as String);
  @override
  set lastMessage(String? _lastMessage) =>
      super.noSuchMethod(Invocation.setter(#lastMessage, _lastMessage),
          returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<dynamic> get userUpdatesStreamSub =>
      (super.noSuchMethod(Invocation.getter(#userUpdatesStreamSub),
              returnValue: _FakeStreamSubscription_1<dynamic>())
          as _i3.StreamSubscription<dynamic>);
  @override
  set userUpdatesStreamSub(
          _i3.StreamSubscription<dynamic>? _userUpdatesStreamSub) =>
      super.noSuchMethod(
          Invocation.setter(#userUpdatesStreamSub, _userUpdatesStreamSub),
          returnValueForMissingStub: null);
  @override
  _i4.Location get location => (super.noSuchMethod(Invocation.getter(#location),
      returnValue: _FakeLocation_2()) as _i4.Location);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void update({_i6.AuthenticationProvider? authenticationProvider}) =>
      super.noSuchMethod(
          Invocation.method(
              #update, [], {#authenticationProvider: authenticationProvider}),
          returnValueForMissingStub: null);
  @override
  _i3.Future<_i4.PermissionStatus> getPermissions() => (super.noSuchMethod(
          Invocation.method(#getPermissions, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<void> askPermissions() =>
      (super.noSuchMethod(Invocation.method(#askPermissions, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> updateUserData(
          {String? name, String? surname, String? phone, double? distance}) =>
      (super.noSuchMethod(
          Invocation.method(#updateUserData, [], {
            #name: name,
            #surname: surname,
            #phone: phone,
            #distance: distance
          }),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i4.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.LocationData> get onLocationChanged =>
      (super.noSuchMethod(Invocation.getter(#onLocationChanged),
              returnValue: Stream<_i4.LocationData>.empty())
          as _i3.Stream<_i4.LocationData>);
  @override
  _i3.Future<bool> changeSettings(
          {_i4.LocationAccuracy? accuracy = _i4.LocationAccuracy.high,
          int? interval = 1000,
          double? distanceFilter = 0.0}) =>
      (super.noSuchMethod(
          Invocation.method(#changeSettings, [], {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter
          }),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> isBackgroundModeEnabled() =>
      (super.noSuchMethod(Invocation.method(#isBackgroundModeEnabled, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(#enableBackgroundMode, [], {#enable: enable}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.LocationData> getLocation() => (super.noSuchMethod(
          Invocation.method(#getLocation, []),
          returnValue: Future<_i4.LocationData>.value(_FakeLocationData_3()))
      as _i3.Future<_i4.LocationData>);
  @override
  _i3.Future<_i4.PermissionStatus> hasPermission() => (super.noSuchMethod(
          Invocation.method(#hasPermission, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<_i4.PermissionStatus> requestPermission() => (super.noSuchMethod(
          Invocation.method(#requestPermission, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<bool> serviceEnabled() =>
      (super.noSuchMethod(Invocation.method(#serviceEnabled, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> requestService() =>
      (super.noSuchMethod(Invocation.method(#requestService, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i9.AndroidNotificationData?> changeNotificationOptions(
          {String? channelName,
          String? title,
          String? iconName,
          String? subtitle,
          String? description,
          _i8.Color? color,
          bool? onTapBringToFront}) =>
      (super.noSuchMethod(
              Invocation.method(#changeNotificationOptions, [], {
                #channelName: channelName,
                #title: title,
                #iconName: iconName,
                #subtitle: subtitle,
                #description: description,
                #color: color,
                #onTapBringToFront: onTapBringToFront
              }),
              returnValue: Future<_i9.AndroidNotificationData?>.value())
          as _i3.Future<_i9.AndroidNotificationData?>);
}
